-------------------------------------------------------------------------------------------------------------------------------------
						Assignment-15
-------------------------------------------------------------------------------------------------------------------------------------
					Array and Functions in C Language
-------------------------------------------------------------------------------------------------------------------------------------
1. Write a function to find the greatest number from the given array of any size. (TSRS)
--------------------------------------------------------------------------------------------------------------------------------------
#include <stdio.h>
#include <conio.h>
max(int [],int);
void main()
{
	int a[]={10,5,45,12,19};
	int n=5,m;
	
	m=max(a,n);
	printf("\nMAXIMUM NUMBER IS %d",m);
	getch();
}
max(int x[],int k)
{
	int t,i;
	t=x[0];
	for(i=1;i<k;i++)
        {
		if(x[i]>t)
			t=x[i];
	}
	return(t);
}
--------------------------------------------------------------------------------------------------------------------------------------
2. Write a function to find the smallest number from the given array of any size. (TSRS)
--------------------------------------------------------------------------------------------------------------------------------------
#include <stdio.h>
#include <conio.h>
min(int [],int);
void main()
{
	int a[]={10,5,45,12,19};
	int n=5,m;
	
	m=min(a,n);
	printf("\nSmallest  NUMBER IS %d",m);
	getch();
}
min(int x[],int k)
{
	int t,i;
	t=x[0];
	for(i=1;i<k;i++)
        {
		if(x[i]<t)
			t=x[i];
	}
	return(t);
}
---------------------------------------------------------------------------------------------------------------------------------------
3. Write a function to sort an array of any size. (TSRS)
--------------------------------------------------------------------------------------------------------------------------------------
#include<stdio.h>


/* Function prototype */
void asc_sort(int a[100], int n);

void main()
{
 int a[100], i, n;
 
 printf("Enter n:\n");
 scanf("%d", &n);
 
 /* Reading array */
 for(i=0;i< n;i++)
 {
  printf("a[%d]=",i);
  scanf("%d", &a[i]);
 }
 
 /* Function Call */
 asc_sort(a,n);
 /* Displaying sorted array */
 printf("Array in ascending order is:\n");
 for(i=0;i< n;i++)
 {
  printf("%d\t", a[i]);
 }
 
}


/* Function definition for asc_sort */
void asc_sort(int a[10], int n)
{
 int i, j, temp;
 for(i=0;i< n-1;i++)
 {
  for(j=i+1;j< n;j++)
  {
   if(a[i]>a[j])
   {
    temp = a[i];
    a[i] = a[j];
    a[j] = temp;
   }
  }
 }
}
--------------------------------------------------------------------------------------------------------------------------------------
4. Write a function to rotate an array by n position in d direction. The d is an indicative
value for left or right. (For example, if array of size 5 is [32, 29, 40, 12, 70]; n is 2 and
d is left, then the resulting array after left rotation 2 times is [40, 12, 70, 32, 29] )
---------------------------------------------------------------------------------------------------------------------------------------
#include<stdio.h>

 
// Function to rotate array
void Rotate(int arr[], int d, int n)
{     int i;
    // Storing rotated version of array
    int temp[n];
 
    // Keeping track of the current index
    // of temp[]
    int k = 0;
 
    // Storing the n - d elements of
    // array arr[] to the front of temp[]
    for (i = d; i < n; i++) {
        temp[k] = arr[i];
        k++;
    }
 
    // Storing the first d elements of array arr[]
    //  into temp
    for (i = 0; i < d; i++) {
        temp[k] = arr[i];
        k++;
    }
 
    // Copying the elements of temp[] in arr[]
    // to get the final rotated array
    for (i = 0; i < n; i++) {
        arr[i] = temp[i];
    }
}
 
// Function to print elements of array
void PrintTheArray(int arr[], int n)
{      int i;
    for (i = 0; i < n; i++) {
        printf("\t%d",arr[i]);
    }
}
 
// Driver code
int main()
{
    int arr[] = { 32, 29, 40, 12,70 };
    int N = sizeof(arr) / sizeof(arr[0]);
    int d = 2;
 
    // Function calling
    Rotate(arr, d, N);
    PrintTheArray(arr, N);
 
    return 0;
}
--------------------------------------------------------------------------------------------------------------------------------------
5. Write a function to find the first occurrence of adjacent duplicate values in the array.
Function has to return the value of the element.
--------------------------------------------------------------------------------------------------------------------------------------
#include <stdio.h>

int main()
{
	int arr[5];
	int i,j,n=5;
	int ind,ele; //to store index & element
	
	//read array elements
	for(i=0; i<n; i++)
	{
		printf("Enter element %d: ",i+1);
		scanf("%d",&arr[i]);
	}
	
	printf("Array elements are: ");
	for(i=0; i<n; i++)
		printf("%d ",arr[i]);
	
	printf("\n");
	ind=-1;
	//check first repeated element
	for(i=0; i<n; i++)
	{
		for(j=i+1; j<n; j++)
		{
			if(arr[i]==arr[j])
			{
				ele=arr[j];
				ind=j;
				break;
			}				
		}
		
		if(ind != -1)
			break;
	}
	if(ind!=-1)
		printf("%d repeated @ %d index\n",ele,ind);
	else
		printf("There is no repeated element\n");

	return 0;
}
---------------------------------------------------------------------------------------------------------------------------------------
6. Write a function in C to read n number of values in an array and display it in reverse
order.
-------------------------------------------------------------------------------------------------------------------------------------
#include<stdio.h>
 
/* Function to reverse arr[] from start to end*/
void rvereseArray(int arr[], int start, int end)
{
    int temp;
    while (start < end)
    {
        temp = arr[start];  
        arr[start] = arr[end];
        arr[end] = temp;
        start++;
        end--;
    }  
}    
 
/* Utility that prints out an array on a line */
void printArray(int arr[], int size)
{
  int i;
  for (i=0; i < size; i++)
    printf("%d ", arr[i]);
 
  printf("\n");
}
 
/* Driver function to test above functions */
int main()
{
    int arr[] = {1, 2, 3, 4, 5, 6};
    int n = sizeof(arr) / sizeof(arr[0]);
    printArray(arr, n);
    rvereseArray(arr, 0, n-1);
    printf("Reversed array is \n");
    printArray(arr, n);   
    return 0;
}
--------------------------------------------------------------------------------------------------------------------------------------
7. Write a function in C to count a total number of duplicate elements in an array.
----------------------------------------------------------------------------------------------------------------------------------------
#include <stdio.h>

int Total_Duplicates(int arr[], int Size);
 
int main()
{
	int arr[10], i, Size, Count = 0;
	
	printf("\n Please Enter Number of elements in an array  :   ");
	scanf("%d", &Size);
	
	printf("\n Please Enter %d elements of an Array  :  ", Size);
	for (i = 0; i < Size; i++)
	{
    	scanf("%d", &arr[i]);
   	}     
 
	Count = Total_Duplicates(arr, Size);

 	printf("\n Total Number of Duplicate Elements in this Array  =  %d ", Count);
	     
 	return 0;
}
int Total_Duplicates(int arr[], int Size)
{
	int i, j, Count = 0;
	
	for (i = 0; i < Size; i++)
	{
		for(j = i + 1; j < Size; j++)
		{
    		if(arr[i] == arr[j])
    		{
    			Count++;
				break;
			}
		}
	}
	return Count;	
}
---------------------------------------------------------------------------------------------------------------------------------------
8. Write a function in C to print all unique elements in an array.
--------------------------------------------------------------------------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
int uniqueEle(int array[], int n){
   int i,j;
   int count = 1;
   for(i = 0; i < n; i++){
      for(j = 0; j < n; j++){
         if(array[i] == array[j] && i != j)
         break;
      }
      if(j == n ){
         printf("unique elements in an array is [%d] : %d",count,array[i]);
         ++count;
      }
   }
   return -1;
}
int main(){
   int n,i;
   printf("Enter no: of elements : ");
   scanf("%d",&n);
   int array[n];
   printf("enter the array elements : ");
   for(i = 0; i < n; i++){
      scanf("%d",&array[i]);
   }
   uniqueEle(array, n);
   return 0;
}
-------------------------------------------------------------------------------------------------------------------------------------
9. Write a function in C to merge two arrays of the same size sorted in descending
order.
-------------------------------------------------------------------------------------------------------------------------------------
#include<stdlib.h>
#include<stdio.h>
 // Merge Function
void merge(int arr[], int l, int m, int r) {
  int i, j, k;
  int n1 = m - l + 1;
  int n2 = r - m;
  int L[n1], R[n2];
  for (i = 0; i < n1; i++)
    L[i] = arr[l + i];
  for (j = 0; j < n2; j++)
    R[j] = arr[m + 1 + j];
  i = 0;
  j = 0;
  k = l;
  while (i < n1 && j < n2) {
    if (L[i] >= R[j]) {
      arr[k] = L[i];
      i++;
    } else {
      arr[k] = R[j];
      j++;
    }
    k++;
  }
  while (i < n1) {
    arr[k] = L[i];
    i++;
    k++;
  }
  while (j < n2) {
    arr[k] = R[j];
    j++;
    k++;
  }
}


void mergeSort(int arr[], int l, int r) {
  if (l < r) {
    int m = l + (r - l) / 2;
    mergeSort(arr, l, m);
    mergeSort(arr, m + 1, r);
    merge(arr, l, m, r);
  }
}


void printArray(int A[], int size) {
  int i;
  for (i = 0; i < size; i++)
    printf("%d ", A[i]);
}


int main() {
  /*Array Size Declaration*/
  int size1, size2, size3,i;
  printf("\nEnter the size for the first array: ");
  scanf("%d", & size1);
  printf("\nEnter the size for the second array: ");
  scanf("%d", & size2);


  size3 = size1 + size2;
  printf("\nEnter the elements in a sorted manner:");
  /*Array Declaration*/
  int array1[size1], array2[size2], array3[size3];
  /*Array Initialized*/
  for(i = 0;i<size1;i++) {
    scanf("%d", & array1[i]);
    array3[i] = array1[i];
  }
  int k = size1;
  printf("\nEnter the elements in a sorted manner:");
  /*Array Initialized*/
  for (i = 0; i < size2; i++) {
    scanf("%d", & array2[i]);
    array3[k] = array2[i];
    k++;
  }
  printf("Given array is \n");
  printArray(array3, size3);
  mergeSort(array3, 0, size3 - 1);
  printf("\nSorted array is \n");
  printArray(array3, size3);
  return 0;
}
---------------------------------------------------------------------------------------------------------------------------------------
10. Write a function in C to count the frequency of each element of an array.
--------------------------------------------------------------------------------------------------------------------------------------
#include <stdio.h>
 
int main()
{
	int arr[10], i, j, k, Size;
	
	printf("\n Please Enter Number of elements in an array  :   ");
	scanf("%d", &Size);
	
	printf("\n Please Enter %d elements of an Array \n", Size);
	for (i = 0; i < Size; i++)
	{
    	scanf("%d", &arr[i]);
   	}     
 
	for (i = 0; i < Size; i++)
	{
		for(j = i + 1; j < Size;)
		{
    		if(arr[i] == arr[j])
    		{
    			for(k = j; k < Size; k++)
    			{
    				arr[k] = arr[k + 1];
				}
				Size--;
			}
			else
			{
				j++;
			}
		}
	}

 	printf("\n Final Array after Deleteing Duplicate Array Elements is:\n");
 	for (i = 0; i < Size; i++)
  	{
 		printf("%d\t", arr[i]);
  	}	     
 	return 0;
}
