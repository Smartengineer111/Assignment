**********************************************************************************************************************************************************************
								ASSIGNMENT-22 (DMA)
**********************************************************************************************************************************************************************


***************************************************************************************************************************************
1.Define a function to input variable length string and store it in an array without
memory wastage.
***************************************************************************************************************************************
// string input from user without asking for size of array
#include <stdio.h>
#include <stdlib.h>
int main()
{

char *str, temp;

int l;

str =(char *)calloc(1,sizeof(char));

printf("Enter string :");

// argument means true(one value means scanf() returns '1' integer value)

while(scanf("%c", &temp))

{

if(temp== '\n') // newline means enter key

break;

for(l=0;str[l]!=NULL;l++) ; // finding the length of string

str=(char*)realloc(str,l+1);

*(str+l) = temp; // store character in string

*(str+l+1) = NULL;

}

printf("Enter string is : %s",str);

return 0;

}
*************************************************************************************************************************************
2. Write a program to ask the user to input a number of data values he would like to
enter then create an array dynamically to accommodate the data values. Now take
the input from the user and display the average of data values.
*************************************************************************************************************************************
#include <stdio.h>
#include <stdlib.h>
struct course {
  int marks;
  char subject[30];
};

int main() {
  struct course *ptr;
  int noOfRecords;
  printf("Enter the number of records: ");
  scanf("%d", &noOfRecords);

  // Memory allocation for noOfRecords structures
  ptr = (struct course *)malloc(noOfRecords * sizeof(struct course));
  for (int i = 0; i < noOfRecords; ++i) {
    printf("Enter subject and marks:\n");
    scanf("%s %d", (ptr + i)->subject, &(ptr + i)->marks);
  }

  printf("Displaying Information:\n");
  for (int i = 0; i < noOfRecords; ++i) {
    printf("%s\t%d\n", (ptr + i)->subject, (ptr + i)->marks);
  }

  free(ptr);

  return 0;
}
*****************************************************************************************************************************************
3. Write a program to calculate the sum of n numbers entered by the user using malloc and free.
*****************************************************************************************************************************************
#include <stdio.h>
#include <stdlib.h>

int main()
{
    int* ptr; //declaration of integer pointer
    int limit; //to store array limit
    int i; //loop counter
    int sum; //to store sum of all elements

    printf("Enter limit of the array: ");
    scanf("%d", &limit);

    //declare memory dynamically
    ptr = (int*)malloc(limit * sizeof(int));

    //read array elements
    for (i = 0; i < limit; i++) {
        printf("Enter element %02d: ", i + 1);
        scanf("%d", (ptr + i));
    }

    //print array elements
    printf("\nEntered array elements are:\n");
    for (i = 0; i < limit; i++) {
        printf("%d\n", *(ptr + i));
    }

    //calculate sum of all elements
    sum = 0; //assign 0 to replace garbage value
    for (i = 0; i < limit; i++) {
        sum += *(ptr + i);
    }
    printf("Sum of array elements is: %d\n", sum);

    //free memory
    free(ptr); //hey, don't forget to free dynamically allocated memory.

    return 0;
}
********************************************************************************************************************************************
4. Write a program to input and print text using dynamic memory allocation.
********************************************************************************************************************************************
/*C program to input and print text
using Dynamic Memory Allocation.*/

#include <stdio.h>
#include <stdlib.h>

int main()
{
    int n;
    char *text;

    printf("Enter limit of the text: ");
    scanf("%d",&n);

    /*allocate memory dynamically*/
    text=(char*)malloc(n*sizeof(char));

    printf("Enter text: ");
    scanf(" "); /*clear input buffer*/
    gets(text);

    printf("Inputted text is: %s\n",text);

    /*Free Memory*/
    free(text);

    return 0;
}
*********************************************************************************************************************************************
5. Write a program to read a one dimensional array, print sum of all elements along with
inputted array elements using dynamic memory allocation.
*********************************************************************************************************************************************
#include <stdio.h>
#include <stdlib.h>
int main()
{
  int i, n;
  int * a, * b, * c;
  printf("How many Elements in each array...\n");
  scanf("%d", & n);
  a = (int * ) malloc(n * sizeof(int));
  b = (int * ) malloc(n * sizeof(int));
  c = (int * ) malloc(n * sizeof(int));
  printf("Enter Elements of First List\n");
  for (i = 0; i < n; i++) {
    scanf("%d", a + i);
  }
  printf("Enter Elements of Second List\n");
  for (i = 0; i < n; i++) {
    scanf("%d", b + i);
  }
  for (i = 0; i < n; i++) {
    *(c + i) = * (a + i) + * (b + i);
  }
  printf("Resultant List is\n");
  for (i = 0; i < n; i++) {
    printf("%d\n", *(c + i));
  }
  return 0;
} /* End of main() */
*******************************************************************************************************************************************
6. Write a program in C to find the largest element using Dynamic Memory Allocation.
*******************************************************************************************************************************************
#include <stdio.h>
#include <stdlib.h>

int main() {

  int n;
  double *data;
  printf("Enter the total number of elements: ");
  scanf("%d", &n);

  // Allocating memory for n elements
  data = (double *)calloc(n, sizeof(double));
  if (data == NULL) {
    printf("Error!!! memory not allocated.");
    exit(0);
  }

  // Storing numbers entered by the user.
  for (int i = 0; i < n; ++i) {
    printf("Enter number%d: ", i + 1);
    scanf("%lf", data + i);
  }

  // Finding the largest number
  for (int i = 1; i < n; ++i) {
    if (*data < *(data + i)) {
      *data = *(data + i);
    }
  }
  printf("Largest number = %.2lf", *data);

  free(data);

  return 0;
}
****************************************************************************************************************************************************
7. Write a program to demonstrate memory leak in C.
****************************************************************************************************************************************************
#include <stdio.h>
#include <stdlib.h>

int main() {
    int ptr = (int)malloc(sizeof(int));
    ptr = (int*)malloc(sizeof(int));

return 0;
}
*****************************************************************************************************************************************************
8. Write a program to demonstrate dangling pointers in C.
******************************************************************************************************************************************************
#include <stdio.h>
#include <stdlib.h>

int main() {
    int ptr = (int)malloc(sizeof(int));
    ptr = (int*)malloc(sizeof(int));

return 0;
}
*******************************************************************************************************************************************************
9. Write a program to allocate memory dynamically of the size in bytes entered by the
user. Also handle the case when memory allocation is failed.
********************************************************************************************************************************************************
#include <stdio.h>
#include <stdlib.h>

int main()
{
    int i, n;
    int *element;

    printf("Enter total number of elements: ");
    scanf("%d", &n);

    /*
        returns a void pointer(which is type-casted to int*)
        pointing to the first block of the allocated space
    */
    element = (int*) calloc(n,sizeof(int));

    /*
        If it fails to allocate enough space as specified,
        it returns a NULL pointer.
    */
    if(element == NULL)
    {
        printf("Error.Not enough space available");
        exit(0);
    }

    for(i = 0; i < n; i++)
    {
        /*
            storing elements from the user
            in the allocated space
        */
       scanf("%d", element+i);
    }
    for(i = 1; i < n; i++)
    {
       if(*element > *(element+i))
       {
            *element = *(element+i);
        }
    }

    printf("Smallest element is %d", *element);

    return 0;
}
***********************************************************************************************************************************************************
10. Find out the maximum and minimum from an array using dynamic memory allocation
in C
***********************************************************************************************************************************************************
#include<stdio.h>
#include<stdlib.h>
int main()
{

    int *p,n,i,max=-32768,min=32767;
    printf("Enter the size of array:");
    scanf("%d",&n);
    p=(int*)malloc(n*sizeof(int));
    printf("\nEnter the elements:\n");
    for(i=0;i<n;i++)
    {
        scanf("%d",p+i);
        if(*(p+i)>max)
            max=*(p+i);
        if(*(p+i)<min)
            min=*(p+i);
    }
    printf("\nMaximum value=%d",max);
    printf("\nMinimum value =%d",min);
    free(p);
    return 0;
}
